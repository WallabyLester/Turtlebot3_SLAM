#!/usr/bin/env python
"""
Node which causes the robot to explore the environment autonomously while mapping the world.

ACTIONS:
    + move_base (move_base_msgs/MoveBase) ~ moves a robot to desired positions using navigation

SUBSCRIBERS:
    + /odom (Odometry) ~ position and velocity in free space 
    + /map (OccupancyGrid) ~ a 2-D grid map where each cell represents the probability of occupancy

"""

import rospy
import actionlib 
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import GoalStatus
from geometry_msgs.msg import Pose, Point, Quaternion
from tf.transformations import quaternion_from_euler
from nav_msgs.msg import OccupancyGrid, Odometry
import numpy as np

class Explore():
    """ Subsribes to current robot location and publishes action goals to explore an area
    """
    def __init__(self):
        self.move_base = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        self.move_base.wait_for_server(rospy.Duration(5.0))

        self.map = OccupancyGrid()
        self.map_data = rospy.Subscriber('/map', OccupancyGrid, self.map_callback)
        self.odom = rospy.Subscriber('/odom', Odometry, self.receive_odometry)


    def map_callback(self, data):
        pass

    def receive_odometry(self, data):
        """ Callback for the /odom subscriber

        Receives the robot's odometry to give the current location

        Args: 
            data (Pose) : the robot's pose

        Returns:
            None
        
        """
        self.x = data.pose.pose.position.x
        self.y = data.pose.pose.position.y
        self.move_goal()
        # rospy.sleep(5)

    def move_goal(self):
        """ Set goal position for the move_base
        
        Moves robot based on the goal position

        Args: 
            None

        Returns:
            None
        
        """
        goal = MoveBaseGoal()

        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = self.x + np.random.uniform(0, 1)
        goal.target_pose.pose.position.y = self.y + np.random.uniform(0, 1)
        goal.target_pose.pose.orientation.w = 1.0

        self.move_base.send_goal(goal)
        rospy.logdebug("sent goal")


def main():
    """ Main function
    """
    rospy.init_node('explore', log_level=rospy.DEBUG)
    explore = Explore()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except:
        rospy.ROSInterruptException
