#!/usr/bin/env python
"""
Node which causes the robot to explore the environment autonomously while mapping the world


"""

import rospy
import actionlib 
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import GoalStatus
from geometry_msgs.msg import Pose, Point, Quaternion
from tf.transformations import quaternion_from_euler
from nav_msgs.msg import OccupancyGrid
import numpy as np

class Explore():
    def __init__(self):
        self.move_base = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        self.move_base.wait_for_server()

        self.map = OccupancyGrid()
        self.map_data = rospy.Subscriber('/map', OccupancyGrid, self.map_callback)


    def map_callback(self, data):
        pass

    def move_goal(self):
        """ Set goal position for the move_base
        
        Moves robot based on the goal position
        
        """
        goal = MoveBaseGoal()

        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = 0
        goal.target_pose.pose.position.y = 0
        goal.target_pose.pose.orientation.w = 1.0

        self.move_base.send_goal(goal)


def main():
    rospy.init_node('explore', log_level=rospy.DEBUG)
    explore = Explore()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except:
        rospy.ROSInterruptException
